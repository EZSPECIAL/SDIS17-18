---------------------
ORDER
---------------------

    - enh backup
    - enh restore
    - enh delete
    - update README if enhanced
    - add scripts if enhanced
    - add 1 page per enhancement to protocol.pdf

    - Serializable needed on all DB objects
    - edit msg: add a new header line / protocol version != 1.0

---------------------
THREADING
---------------------

Version 6

    - I/O concurrency with java.nio.channels.AsynchronousFileChannel

---------------------
DELIVERY & DEMO
---------------------

Report
    - 1 page per enhancement (backup, restore, delete)
    - 2-3 pages for concurrency model

Setup
    - check svn command for checkout
    - test PCs in lab, local and remote

---------------------
ENHANCEMENTS
---------------------

Backup

    - ensure repDegre
    - keep interoperability

Restore (using TCP)

    - ServerSocket - start TCP connection
    - Socket - transfer data
    - ServerSocket(int port)
    - ServerSocket(int port, int backlog, InetAddress addr)
    - Socket(InetAddress addr, int port)

    - socket.accept() - wait for connection
    - socket.close() / shutdownOutput()

    - getInputStream() BufferedReader -> ReadLine()
    - getOutputStream() PrintWriter -> println()
    - ObjectInputStream() implements Serializable
    - ObjectOutputStream() implements Serializable

    - multiple clients

Delete

    - delete chunks even if Peer is currently offline (WAKEUP message, store database, sync database?)

---------------------
EXTRAS
---------------------

    - Channel concurrentlinkedqueue for messages and 1 thread for each queue processing
    - PUTCHUNK sliding window
    - every protocol playing nice with each other (prevent same peer same protocol same file)
    - RMI over network, "//host/name" format